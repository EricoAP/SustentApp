{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.loginUrl = 'https://localhost:5140/api/';\n  }\n  login(credentials) {\n    return this.http.post(this.loginUrl + 'users/login', credentials);\n  }\n  register(credentials) {\n    return this.http.post(this.loginUrl, credentials);\n  }\n  update(credentials) {\n    return this.http.post(this.loginUrl, credentials);\n  }\n  forgotEmail(credentials) {\n    return this.http.post(this.loginUrl, credentials);\n  }\n  resetPassword(credentials) {\n    return this.http.post(this.loginUrl, credentials);\n  }\n  isAuthenticated() {\n    // return !!sessionStorage.getItem('User');\n    return !!localStorage.getItem('Serasa');\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","http","loginUrl","login","credentials","post","register","update","forgotEmail","resetPassword","isAuthenticated","localStorage","getItem","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\sustentApp\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private loginUrl = 'https://localhost:5140/api/';\n\n  constructor(private http: HttpClient) { }\n  \n  login(credentials: { email: string; password: string }): Observable<any> {\n    return this.http.post<any>(this.loginUrl + 'users/login', credentials);\n  }\n  \n  register(credentials: { email: string; password: string }): Observable<any> {\n    return this.http.post<any>(this.loginUrl, credentials);\n  }\n  \n  update(credentials: { email: string; password: string }): Observable<any> {\n    return this.http.post<any>(this.loginUrl, credentials);\n  }\n\n  forgotEmail(credentials: { email: string; }): Observable<any> {\n    return this.http.post<any>(this.loginUrl, credentials);\n  }\n\n  resetPassword(credentials: { token: string; email: string; password: string }): Observable<any> {\n    return this.http.post<any>(this.loginUrl, credentials);\n  }\n  \n  isAuthenticated(): boolean {\n    // return !!sessionStorage.getItem('User');\n    return !!localStorage.getItem('Serasa');\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,QAAQ,GAAG,6BAA6B;EAER;EAExCC,KAAKA,CAACC,WAAgD;IACpD,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAM,IAAI,CAACH,QAAQ,GAAG,aAAa,EAAEE,WAAW,CAAC;EACxE;EAEAE,QAAQA,CAACF,WAAgD;IACvD,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAM,IAAI,CAACH,QAAQ,EAAEE,WAAW,CAAC;EACxD;EAEAG,MAAMA,CAACH,WAAgD;IACrD,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAM,IAAI,CAACH,QAAQ,EAAEE,WAAW,CAAC;EACxD;EAEAI,WAAWA,CAACJ,WAA+B;IACzC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAM,IAAI,CAACH,QAAQ,EAAEE,WAAW,CAAC;EACxD;EAEAK,aAAaA,CAACL,WAA+D;IAC3E,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAM,IAAI,CAACH,QAAQ,EAAEE,WAAW,CAAC;EACxD;EAEAM,eAAeA,CAAA;IACb;IACA,OAAO,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EACzC;EAAC,QAAAC,CAAA,G;qBA7BUd,WAAW,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXnB,WAAW;IAAAoB,OAAA,EAAXpB,WAAW,CAAAqB,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}