{"ast":null,"code":"export class AuthenticationInterceptor {\n  intercept(request, next) {\n    const token = sessionStorage.getItem('token');\n    if (token) {\n      const cloned = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(cloned);\n    } else {\n      // If no token, proceed without modifying the request\n      return next.handle(request);\n    }\n  }\n}","map":{"version":3,"names":["AuthenticationInterceptor","intercept","request","next","token","sessionStorage","getItem","cloned","clone","headers","set","handle"],"sources":["C:\\sustentApp\\src\\app\\core\\interceptors\\authentication.interceptor.ts"],"sourcesContent":["import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport class AuthenticationInterceptor implements HttpInterceptor {\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const token = sessionStorage.getItem('token');\r\n\r\n    if (token) {\r\n      const cloned = request.clone({\r\n        headers: request.headers.set('Authorization', `Bearer ${token}`)\r\n      });\r\n\r\n      return next.handle(cloned);\r\n    } else {\r\n      // If no token, proceed without modifying the request\r\n      return next.handle(request);\r\n    }\r\n  }\r\n}"],"mappings":"AAGA,OAAM,MAAOA,yBAAyB;EACpCC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IACpD,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAE7C,IAAIF,KAAK,EAAE;MACT,MAAMG,MAAM,GAAGL,OAAO,CAACM,KAAK,CAAC;QAC3BC,OAAO,EAAEP,OAAO,CAACO,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUN,KAAK,EAAE;OAChE,CAAC;MAEF,OAAOD,IAAI,CAACQ,MAAM,CAACJ,MAAM,CAAC;KAC3B,MAAM;MACL;MACA,OAAOJ,IAAI,CAACQ,MAAM,CAACT,OAAO,CAAC;;EAE/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}